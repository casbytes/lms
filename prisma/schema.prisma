generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

//||||||||||||||||##########||||||||||||||||//
//                   USER                   //
//||||||||||||||||##########||||||||||||||||//
model User {
  id                  String         @id @default(uuid())
  name                String?
  email               String         @unique
  role                String         @default("USER") //USER, ADMIN,
  avatarUrl           String?
  stripeCustomerId    String?        @unique
  githubUsername      String?
  subscribed          Boolean        @default(false)
  subscriptionId      String?
  createdAt           DateTime       @default(now())
  updatedAt           DateTime       @updatedAt
  verified            Boolean        @default(false)
  completedOnboarding Boolean        @default(false)
  authState           String?
  verificationToken   String?
  currentUrl          String?
  course              Course[]
  module              Module[]
  subModule           SubModule[]
  lesson              Lesson[]
  tests               Test[]
  checkpoints         Checkpoint[]
  projects            Project[]
  badges              Badge[]
  learningHours       LearningTime[]
  reviews             Reviews[]
}

model LearningTime {
  id     String   @id @default(uuid())
  date   DateTime @default(now())
  hours  Float
  user   User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String
}

//||||||||||||||||##########||||||||||||||||//
//                 PROGRESS                 //
//||||||||||||||||##########||||||||||||||||//
model Course {
  id      String    @id @default(uuid())
  title   String
  slug    String
  score   Int       @default(0)
  status  String    @default("IN_PROGRESS") //IN_PROGRESS, COMPLETED
  users   User[]
  modules Module[]
  project Project?
  reviews Reviews[]
}

model Module {
  id         String      @id @default(uuid())
  title      String
  slug       String
  premium    Boolean     @default(true)
  score      Int         @default(0)
  status     String      @default("LOCKED") //LOCKED, IN_PROGRESS, COMPLETED
  order      Int
  courseId   String?
  users      User[]
  course     Course?     @relation(fields: [courseId], references: [id], onDelete: Cascade)
  subModules SubModule[]
  badges     Badge[]
  test       Test?
  checkpoint Checkpoint?
  reviews    Reviews[]

  @@index([courseId], name: "courseId")
}

model SubModule {
  id         String      @id @default(uuid())
  title      String
  slug       String
  status     String      @default("LOCKED") //LOCKED, IN_PROGRESS, COMPLETED
  order      Int
  moduleId   String
  users      User[]
  module     Module      @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  lessons    Lesson[]
  test       Test?
  checkpoint Checkpoint?

  @@index([moduleId], name: "moduleId")
}

model Lesson {
  id          String    @id @default(uuid())
  title       String
  slug        String
  status      String    @default("LOCKED") //LOCKED, IN_PROGRESS, COMPLETED
  subModuleId String
  order       Int
  users       User[]
  subModule   SubModule @relation(fields: [subModuleId], references: [id], onDelete: Cascade)

  @@index([subModuleId], name: "subModuleId")
}

model Badge {
  id                   String @id @default(uuid())
  title                String
  locked_description   String
  unlocked_description String
  level                String // NOVICE, ADEPT, PROFICIENT, VIRTUOSO
  status               String @default("LOCKED") //LOCKED, UNLOCKED
  moduleId             String
  userId               String
  user                 User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  module               Module @relation(fields: [moduleId], references: [id], onDelete: Cascade)
}

model Checkpoint {
  id              String     @id @default(uuid())
  title           String
  score           Int        @default(0)
  status          String     @default("LOCKED") //LOCKED, IN_PROGRESS, SUBMITTED, GRADED, COMPLETED
  testEnvironment String     @default("node") //node, browser
  moduleId        String?    @unique
  subModuleId     String?    @unique
  users           User[]
  module          Module?    @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  subModule       SubModule? @relation(fields: [subModuleId], references: [id], onDelete: Cascade)
}

model Test {
  id            String     @id @default(uuid())
  title         String
  status        String     @default("LOCKED") //LOCKED, AVAILABLE  COMPLETED
  score         Int        @default(0)
  attempts      Int        @default(0)
  attempted     Boolean    @default(false)
  nextAttemptAt DateTime?
  moduleId      String?    @unique
  subModuleId   String?    @unique
  users         User[]
  module        Module?    @relation(fields: [moduleId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  subModule     SubModule? @relation(fields: [subModuleId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model Project {
  id              String @id @default(uuid())
  title           String
  slug            String
  score           Int    @default(0)
  status          String @default("LOCKED") //LOCKED, IN_PROGRESS, COMPLETED
  testEnvironment String @default("node") //node, browser
  courseId        String @unique
  contributors    User[]
  course          Course @relation(fields: [courseId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model Reviews {
  id          String   @id @default(uuid())
  userId      String
  courseId    String?  @unique
  moduleId    String?  @unique
  rating      Int      @default(0)
  description String
  createdAt   DateTime @default(now())
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  course      Course?  @relation(fields: [courseId], references: [id], onDelete: Cascade)
  module      Module?  @relation(fields: [moduleId], references: [id], onDelete: Cascade)
}
